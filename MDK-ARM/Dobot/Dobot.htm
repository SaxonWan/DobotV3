<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [Dobot\Dobot.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image Dobot\Dobot.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Sep 09 14:35:31 2020
<BR><P>
<H3>Maximum Stack Usage =        920 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; service_reply() &rArr; ArduinoJson::Internals::JsonPrintable&lang;ArduinoJson::JsonObject&rang;::printTo(char*, unsigned) const &rArr; ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonObject&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&) &rArr; ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonVariant&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&) &rArr;  ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonVariant&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&) (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[22]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[a]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">HardFault_Handler</a><BR>
 <LI><a href="#[9]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">MemManage_Handler</a><BR>
 <LI><a href="#[13a]">ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonVariant&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13a]">ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonVariant&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&)</a><BR>
 <LI><a href="#[131]">void ArduinoJson::Internals::skipSpacesAndComments&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader&rang;(T1&)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[131]">void ArduinoJson::Internals::skipSpacesAndComments&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader&rang;(T1&)</a><BR>
 <LI><a href="#[12e]">ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::parseAnythingTo(ArduinoJson::JsonVariant*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12f]">ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::parseObject()</a><BR>
 <LI><a href="#[12c]">ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::parseArray()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12e]">ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::parseAnythingTo(ArduinoJson::JsonVariant*)</a><BR>
 <LI><a href="#[b]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[22]">ADC1_2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[3f]">ADC3_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[a]">BusFault_Handler</a> from stm32l4xx_it.o(i.BusFault_Handler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[24]">CAN1_RX0_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[25]">CAN1_RX1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[26]">CAN1_SCE_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[23]">CAN1_TX_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[50]">COMP_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[4d]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[4e]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[4f]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[3a]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel3_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel4_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel5_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[20]">DMA1_Channel6_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[21]">DMA1_Channel7_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[48]">DMA2_Channel1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[49]">DMA2_Channel2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[4a]">DMA2_Channel3_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[4b]">DMA2_Channel4_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[4c]">DMA2_Channel5_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[54]">DMA2_Channel6_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[55]">DMA2_Channel7_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[d]">DebugMon_Handler</a> from stm32l4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[16]">EXTI0_IRQHandler</a> from stm32l4xx_it.o(i.EXTI0_IRQHandler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[38]">EXTI15_10_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[17]">EXTI1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[18]">EXTI2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[19]">EXTI3_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[1a]">EXTI4_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[27]">EXTI9_5_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[14]">FLASH_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[40]">FMC_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[60]">FPU_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[8]">HardFault_Handler</a> from stm32l4xx_it.o(i.HardFault_Handler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[30]">I2C1_ER_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[2f]">I2C1_EV_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[32]">I2C2_ER_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[31]">I2C2_EV_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[59]">I2C3_ER_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[58]">I2C3_EV_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[5e]">LCD_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[51]">LPTIM1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[52]">LPTIM2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[56]">LPUART1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[9]">MemManage_Handler</a> from stm32l4xx_it.o(i.MemManage_Handler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[7]">NMI_Handler</a> from stm32l4xx_it.o(i.NMI_Handler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[53]">OTG_FS_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[11]">PVD_PVM_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[e]">PendSV_Handler</a> from stm32l4xx_it.o(i.PendSV_Handler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[57]">QUADSPI_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[15]">RCC_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[5f]">RNG_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[39]">RTC_Alarm_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[13]">RTC_WKUP_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[6]">Reset_Handler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[5a]">SAI1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[5b]">SAI2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[41]">SDMMC1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[33]">SPI1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[34]">SPI2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[43]">SPI3_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[c]">SVC_Handler</a> from stm32l4xx_it.o(i.SVC_Handler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[5c]">SWPMI1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[f]">SysTick_Handler</a> from stm32l4xx_it.o(i.SysTick_Handler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[62]">SystemInit</a> from system_stm32l4xx.o(i.SystemInit) referenced from startup_stm32l476xx.o(.text)
 <LI><a href="#[12]">TAMP_STAMP_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[28]">TIM1_BRK_TIM15_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[2b]">TIM1_CC_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[2a]">TIM1_TRG_COM_TIM17_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[29]">TIM1_UP_TIM16_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[2c]">TIM2_IRQHandler</a> from stm32l4xx_it.o(i.TIM2_IRQHandler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[2d]">TIM3_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[2e]">TIM4_IRQHandler</a> from stm32l4xx_it.o(i.TIM4_IRQHandler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[42]">TIM5_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[46]">TIM6_DAC_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[47]">TIM7_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[3b]">TIM8_BRK_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[3e]">TIM8_CC_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[3d]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[3c]">TIM8_UP_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[5d]">TSC_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[44]">UART4_IRQHandler</a> from stm32l4xx_it.o(i.UART4_IRQHandler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[45]">UART5_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[64]">UART_DMAAbortOnError</a> from stm32l4xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[66]">UART_RxISR_16BIT</a> from stm32l4xx_hal_uart.o(i.UART_RxISR_16BIT) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Receive_IT)
 <LI><a href="#[65]">UART_RxISR_8BIT</a> from stm32l4xx_hal_uart.o(i.UART_RxISR_8BIT) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Receive_IT)
 <LI><a href="#[68]">UART_TxISR_16BIT</a> from stm32l4xx_hal_uart.o(i.UART_TxISR_16BIT) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_IT)
 <LI><a href="#[67]">UART_TxISR_8BIT</a> from stm32l4xx_hal_uart.o(i.UART_TxISR_8BIT) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_IT)
 <LI><a href="#[35]">USART1_IRQHandler</a> from stm32l4xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[36]">USART2_IRQHandler</a> from stm32l4xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[37]">USART3_IRQHandler</a> from stm32l4xx_it.o(i.USART3_IRQHandler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[b]">UsageFault_Handler</a> from stm32l4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[10]">WWDG_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[74]">ArduinoJson::Internals::StaticJsonBufferBase::alloc(unsigned)</a> from main.o(i._ZN11ArduinoJson9Internals20StaticJsonBufferBase5allocEj) referenced from main.o(.constdata__ZTVN11ArduinoJson16StaticJsonBufferILj200EEE)
 <LI><a href="#[74]">ArduinoJson::Internals::StaticJsonBufferBase::alloc(unsigned)</a> from main.o(i._ZN11ArduinoJson9Internals20StaticJsonBufferBase5allocEj) referenced from main.o(.constdata__ZTVN11ArduinoJson16StaticJsonBufferILj400EEE)
 <LI><a href="#[74]">ArduinoJson::Internals::StaticJsonBufferBase::alloc(unsigned)</a> from main.o(i._ZN11ArduinoJson9Internals20StaticJsonBufferBase5allocEj) referenced from main.o(.constdata__ZTVN11ArduinoJson9Internals20StaticJsonBufferBaseE)
 <LI><a href="#[63]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l476xx.o(.text)
 <LI><a href="#[6a]">_snputc</a> from printf8.o(i._snputc) referenced from printf8.o(i.__0snprintf$8)
 <LI><a href="#[6b]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[69]">fputc</a> from usart.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[61]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[6f]">mbedtls_sha1_ret</a> from sha1.o(i.mbedtls_sha1_ret) referenced from md_wrap.o(.constdata)
 <LI><a href="#[5]">memset</a> from memseta.o(.text) referenced 2 times from platform_util.o(.data)
 <LI><a href="#[72]">sha1_clone_wrap</a> from md_wrap.o(i.sha1_clone_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[70]">sha1_ctx_alloc</a> from md_wrap.o(i.sha1_ctx_alloc) referenced from md_wrap.o(.constdata)
 <LI><a href="#[71]">sha1_ctx_free</a> from md_wrap.o(i.sha1_ctx_free) referenced from md_wrap.o(.constdata)
 <LI><a href="#[6e]">sha1_finish_wrap</a> from md_wrap.o(i.sha1_finish_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[73]">sha1_process_wrap</a> from md_wrap.o(i.sha1_process_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[6c]">sha1_starts_wrap</a> from md_wrap.o(i.sha1_starts_wrap) referenced from md_wrap.o(.constdata)
 <LI><a href="#[6d]">sha1_update_wrap</a> from md_wrap.o(i.sha1_update_wrap) referenced from md_wrap.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[63]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(.text)
</UL>
<P><STRONG><a name="[13c]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[75]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[7e]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[13d]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[13e]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[13f]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[140]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[141]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[6]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM1_TRG_COM_TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e9]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageWrite
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPTPCmd(tagPTPCmd*, bool, unsigned long long*)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPTPCoordinateParams(tagPTPCoordinateParams*, bool, unsigned long long*)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPTPCommonParams(tagPTPCommonParams*, bool, unsigned long long*)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufferEnqueue
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufferDequeue
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mqtt_password
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update_ret
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageRead
</UL>

<P><STRONG><a name="[11e]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::JsonObject& ArduinoJson::Internals::JsonBufferBase&lang;ArduinoJson::Internals::StaticJsonBufferBase&rang;::parseObject&lang;char&rang;(T1*, unsigned char)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_clone
</UL>

<P><STRONG><a name="[142]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[143]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[144]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish_ret
</UL>

<P><STRONG><a name="[a9]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPTPCmd(tagPTPCmd*, bool, unsigned long long*)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPTPCoordinateParams(tagPTPCoordinateParams*, bool, unsigned long long*)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrEndEffectorGripper(bool, bool, bool, unsigned long long*)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPTPCommonParams(tagPTPCommonParams*, bool, unsigned long long*)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mqtt_password
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish_ret
</UL>

<P><STRONG><a name="[145]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform_util.o(.data)
</UL>
<P><STRONG><a name="[fb]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_request(int)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_reply()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_status(int, int, int, int, int, int, int, int)
</UL>

<P><STRONG><a name="[112]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_send_command
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::strstr(char*, const char*)
</UL>

<P><STRONG><a name="[c2]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[bf]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mqtt_password
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_send_command
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pub_data
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_request(int)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mbedtls_SHA1_HMAC_Compute
</UL>

<P><STRONG><a name="[ff]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::ListIterator&lang;ArduinoJson::JsonPair&rang; ArduinoJson::JsonObject::findKey&lang;const char*&rang;(T1)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_reply()
</UL>

<P><STRONG><a name="[c3]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_reply()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[7c]"></a>calloc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, calloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_ctx_alloc
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[146]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[147]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[148]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[149]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>Ali_connect</STRONG> (Thumb, 1618 bytes, Stack size 432 bytes, emw3080.o(i.Ali_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = Ali_connect &rArr; get_mqtt_password &rArr; Mbedtls_SHA1_HMAC_Compute &rArr; mbedtls_md_hmac_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mqtt_password
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_send_command
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial()
</UL>

<P><STRONG><a name="[a]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI0_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[d7]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[c6]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32l4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[85]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32l4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_send_command
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grip_RS(int)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grip_GS(int)
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[84]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[aa]"></a>HAL_GPIO_Init</STRONG> (Thumb, 414 bytes, Stack size 40 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[b6]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[86]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI2_Config
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[ef]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[88]"></a>HAL_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32l4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>HAL_InitTick</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32l4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[8b]"></a>HAL_MspInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32l4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[99]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[8d]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[89]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[106]"></a>HAL_PWREx_ControlVoltageScaling</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_ControlVoltageScaling))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[ee]"></a>HAL_PWREx_GetVoltageRange</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_GetVoltageRange))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[8f]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 928 bytes, Stack size 40 bytes, stm32l4xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI2_Config
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[92]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[f0]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[f1]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[93]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[94]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1242 bytes, Stack size 32 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[8c]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32l4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[a5]"></a>HAL_TIMEx_Break2Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim_ex.o(i.HAL_TIMEx_Break2Callback))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[a4]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[a7]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[d8]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32l4xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[96]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
</UL>

<P><STRONG><a name="[97]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[10c]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial()
</UL>

<P><STRONG><a name="[9a]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
</UL>

<P><STRONG><a name="[a0]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[9f]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 388 bytes, Stack size 16 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; ArduinoJson::Internals::JsonPrintable&lang;ArduinoJson::JsonObject&rang;::printTo(char*, unsigned) const &rArr; ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonObject&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&) &rArr; ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonVariant&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&) &rArr;  ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonVariant&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_Break2Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[a8]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, tim.o(i.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[a1]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[ab]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC1_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC6_SetConfig
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC5_SetConfig
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[b2]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_PWM_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[b3]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tim.o(i.HAL_TIM_PWM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_PWM_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[a2]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[b4]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial()
</UL>

<P><STRONG><a name="[a3]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 368 bytes, Stack size 296 bytes, main.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = HAL_TIM_PeriodElapsedCallback &rArr; ArduinoJson::Internals::JsonPrintable&lang;ArduinoJson::JsonObject&rang;::printTo(char*, unsigned) const &rArr; ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonObject&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&) &rArr; ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonVariant&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&) &rArr;  ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonVariant&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonVariantAs&lang;T1&rang;::type ArduinoJson::Internals::JsonObjectSubscript&lang;const char*&rang;::as&lang;int&rang;() const
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::ListConstIterator&lang;ArduinoJson::JsonPair&rang;::operator !=(const ArduinoJson::Internals::ListConstIterator&lang;ArduinoJson::JsonPair&rang;&) const
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonPrintable&lang;ArduinoJson::JsonObject&rang;::printTo(char*, unsigned) const
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::ListConstIterator&lang;ArduinoJson::JsonPair&rang; ArduinoJson::JsonObject::findKey&lang;const char*&rang;(T1) const
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson::Internals::operator ==&lang;int&rang;(const ArduinoJson::Internals::JsonVariantComparisons&lang;ArduinoJson::Internals::JsonObjectSubscript&lang;const char*&rang;&rang;&, T1)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::EnableIf&lang;(!ArduinoJson::Internals::IsArray&lang;T1&rang;::value), ArduinoJson::Internals::JsonObjectSubscript&lang;const char*&rang;&&rang;::type ArduinoJson::Internals::JsonObjectSubscript&lang;const char*&rang;::operator =&lang;int&rang;(const T1&)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::JsonObject& ArduinoJson::Internals::JsonBufferBase&lang;ArduinoJson::Internals::StaticJsonBufferBase&rang;::parseObject&lang;char&rang;(T1*, unsigned char)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::StaticJsonBuffer&lang;(unsigned)200&rang;::StaticJsonBuffer()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::strstr(char*, const char*)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[a6]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[c8]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart_ex.o(i.HAL_UARTEx_WakeupCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[c7]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[c4]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_UART_TxCpltCallback &rArr; RingBufferDequeue
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[ca]"></a>HAL_UART_Init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
</UL>

<P><STRONG><a name="[cb]"></a>HAL_UART_MspInit</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[d0]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 164 bytes, Stack size 12 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_send_command
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial()
</UL>

<P><STRONG><a name="[cf]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, usart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufferEnqueue
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
</UL>

<P><STRONG><a name="[c0]"></a>HAL_UART_Transmit</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_request(int)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[d4]"></a>HAL_UART_Transmit_IT</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>

<P><STRONG><a name="[c9]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, usart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UART_TxCpltCallback &rArr; RingBufferDequeue
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufferDequeue
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolProcess
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_send_command
</UL>

<P><STRONG><a name="[8]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[d5]"></a>MX_GPIO_Init</STRONG> (Thumb, 246 bytes, Stack size 56 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d6]"></a>MX_TIM3_Init</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, tim.o(i.MX_TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_TIM3_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d9]"></a>MX_TIM4_Init</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, tim.o(i.MX_TIM4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_TIM4_Init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[da]"></a>MX_UART4_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usart.o(i.MX_UART4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_UART4_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dc]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usart.o(i.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dd]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usart.o(i.MX_USART3_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[de]"></a>Mbedtls_SHA1_HMAC_Compute</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, hmac_sha1.o(i.Mbedtls_SHA1_HMAC_Compute))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Mbedtls_SHA1_HMAC_Compute &rArr; mbedtls_md_hmac_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_setup
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_info_from_type
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_update
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_finish
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mqtt_password
</UL>

<P><STRONG><a name="[9]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[e6]"></a>MessageProcess</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, message.o(i.MessageProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MessageProcess &rArr; PacketProcess(tagProtocolHandler*) &rArr; PacketReadProcess(tagProtocolHandler*) &rArr; RingBufferEnqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketProcess(tagProtocolHandler*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolProcess
</UL>

<P><STRONG><a name="[e8]"></a>MessageRead</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, message.o(i.MessageRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MessageRead &rArr; RingBufferDequeue
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufferDequeue
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolProcess
</UL>

<P><STRONG><a name="[ea]"></a>MessageWrite</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, message.o(i.MessageWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MessageWrite &rArr; RingBufferEnqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufferEnqueue
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPTPCmd(tagPTPCmd*, bool, unsigned long long*)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPTPCoordinateParams(tagPTPCoordinateParams*, bool, unsigned long long*)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrEndEffectorGripper(bool, bool, bool, unsigned long long*)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPTPCommonParams(tagPTPCommonParams*, bool, unsigned long long*)
</UL>

<P><STRONG><a name="[7]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[eb]"></a>ProtocolInit</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, protocol.o(i.ProtocolInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ProtocolInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufferInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dobot_init()
</UL>

<P><STRONG><a name="[ed]"></a>ProtocolProcess</STRONG> (Thumb, 36 bytes, Stack size 176 bytes, protocol.o(i.ProtocolProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ProtocolProcess &rArr; MessageProcess &rArr; PacketProcess(tagProtocolHandler*) &rArr; PacketReadProcess(tagProtocolHandler*) &rArr; RingBufferEnqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageRead
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grip_RS(int)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grip_GS(int)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dobot_init()
</UL>

<P><STRONG><a name="[104]"></a>RingBufferDataAt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, packet.o(i.RingBufferDataAt))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketWriteProcess(tagProtocolHandler*)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketReadProcess(tagProtocolHandler*)
</UL>

<P><STRONG><a name="[d3]"></a>RingBufferDequeue</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, ringbuffer.o(i.RingBufferDequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RingBufferDequeue
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketWriteProcess(tagProtocolHandler*)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketReadProcess(tagProtocolHandler*)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageRead
</UL>

<P><STRONG><a name="[d1]"></a>RingBufferEnqueue</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, ringbuffer.o(i.RingBufferEnqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RingBufferEnqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageWrite
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketWriteProcess(tagProtocolHandler*)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketReadProcess(tagProtocolHandler*)
</UL>

<P><STRONG><a name="[ec]"></a>RingBufferInit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ringbuffer.o(i.RingBufferInit))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolInit
</UL>

<P><STRONG><a name="[c]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>SystemInit</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_stm32l4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(.text)
</UL>
<P><STRONG><a name="[2c]"></a>TIM2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = TIM2_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; ArduinoJson::Internals::JsonPrintable&lang;ArduinoJson::JsonObject&rang;::printTo(char*, unsigned) const &rArr; ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonObject&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&) &rArr; ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonVariant&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&) &rArr;  ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonVariant&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM4_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = TIM4_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; ArduinoJson::Internals::JsonPrintable&lang;ArduinoJson::JsonObject&rang;::printTo(char*, unsigned) const &rArr; ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonObject&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&) &rArr; ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonVariant&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&) &rArr;  ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonVariant&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, stm32l4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[b5]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
</UL>

<P><STRONG><a name="[9b]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[ad]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, stm32l4xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[44]"></a>UART4_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART4_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_UART_TxCpltCallback &rArr; RingBufferDequeue
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[cd]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[ce]"></a>UART_CheckIdleState</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[cc]"></a>UART_SetConfig</STRONG> (Thumb, 622 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[d2]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[35]"></a>USART1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_UART_TxCpltCallback &rArr; RingBufferDequeue
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>USART2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_UART_TxCpltCallback &rArr; RingBufferDequeue
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USART3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_UART_TxCpltCallback &rArr; RingBufferDequeue
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[f2]"></a>dobot_init()</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, dobot.o(i._Z10dobot_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = dobot_init() &rArr; ProtocolProcess &rArr; MessageProcess &rArr; PacketProcess(tagProtocolHandler*) &rArr; PacketReadProcess(tagProtocolHandler*) &rArr; RingBufferEnqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPTPCoordinateParams(tagPTPCoordinateParams*, bool, unsigned long long*)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPTPCommonParams(tagPTPCommonParams*, bool, unsigned long long*)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolProcess
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolInit
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial()
</UL>

<P><STRONG><a name="[f5]"></a>json_status(int, int, int, int, int, int, int, int)</STRONG> (Thumb, 414 bytes, Stack size 536 bytes, main.o(i._Z11json_statusiiiiiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = json_status(int, int, int, int, int, int, int, int) &rArr; ArduinoJson::Internals::JsonPrintable&lang;ArduinoJson::JsonObject&rang;::printTo(char*, unsigned) const &rArr; ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonObject&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&) &rArr; ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonVariant&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&) &rArr;  ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonVariant&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonPrintable&lang;ArduinoJson::JsonObject&rang;::printTo(char*, unsigned) const
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::EnableIf&lang;ArduinoJson::Internals::StringTraits&lang;const T1*, void&rang;::has_equals, ArduinoJson::Internals::JsonObjectSubscript&lang;const T1*&rang;&rang;::type ArduinoJson::Internals::JsonVariantSubscripts&lang;ArduinoJson::Internals::JsonObjectSubscript&lang;const char*&rang;&rang;::operator []&lang;char&rang;(const T1*)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::EnableIf&lang;(!ArduinoJson::Internals::IsArray&lang;T1&rang;::value), ArduinoJson::Internals::JsonObjectSubscript&lang;const char*&rang;&&rang;::type ArduinoJson::Internals::JsonObjectSubscript&lang;const char*&rang;::operator =&lang;int&rang;(const T1&)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonObjectSubscript&lang;const char*&rang;& ArduinoJson::Internals::JsonObjectSubscript&lang;const char*&rang;::operator =&lang;const char&rang;(T1*)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::JsonObject& ArduinoJson::JsonObject::createNestedObject_impl&lang;const char*&rang;(T1)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::StaticJsonBufferBase::StaticJsonBufferBase(char*, unsigned)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::JsonBuffer::createObject()
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e7]"></a>PacketProcess(tagProtocolHandler*)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, packet.o(i._Z13PacketProcessP18tagProtocolHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PacketProcess(tagProtocolHandler*) &rArr; PacketReadProcess(tagProtocolHandler*) &rArr; RingBufferEnqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketWriteProcess(tagProtocolHandler*)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketReadProcess(tagProtocolHandler*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageProcess
</UL>

<P><STRONG><a name="[fe]"></a>service_reply()</STRONG> (Thumb, 340 bytes, Stack size 696 bytes, main.o(i._Z13service_replyv))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = service_reply() &rArr; ArduinoJson::Internals::JsonPrintable&lang;ArduinoJson::JsonObject&rang;::printTo(char*, unsigned) const &rArr; ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonObject&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&) &rArr; ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonVariant&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&) &rArr;  ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonVariant&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_pub_set
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pub_data
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::ListConstIterator&lang;ArduinoJson::JsonPair&rang;::operator !=(const ArduinoJson::Internals::ListConstIterator&lang;ArduinoJson::JsonPair&rang;&) const
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonPrintable&lang;ArduinoJson::JsonObject&rang;::printTo(char*, unsigned) const
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::ListConstIterator&lang;ArduinoJson::JsonPair&rang; ArduinoJson::JsonObject::findKey&lang;const char*&rang;(T1) const
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::EnableIf&lang;(!ArduinoJson::Internals::IsArray&lang;T1&rang;::value), ArduinoJson::Internals::JsonObjectSubscript&lang;const char*&rang;&&rang;::type ArduinoJson::Internals::JsonObjectSubscript&lang;const char*&rang;::operator =&lang;int&rang;(const T1&)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::JsonObject& ArduinoJson::Internals::JsonBufferBase&lang;ArduinoJson::Internals::StaticJsonBufferBase&rang;::parseObject&lang;char&rang;(T1*, unsigned char)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::StaticJsonBuffer&lang;(unsigned)200&rang;::StaticJsonBuffer()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ArduinoJson::JsonObject::remove&lang;const char&rang;(T1*)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::JsonObject& ArduinoJson::JsonObject::createNestedObject_impl&lang;const char*&rang;(T1)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::strstr(char*, const char*)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[103]"></a>camera_request(int)</STRONG> (Thumb, 126 bytes, Stack size 664 bytes, main.o(i._Z14camera_requesti))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = camera_request(int) &rArr; ArduinoJson::Internals::JsonPrintable&lang;ArduinoJson::JsonObject&rang;::printTo(char*, unsigned) const &rArr; ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonObject&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&) &rArr; ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonVariant&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&) &rArr;  ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonVariant&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonPrintable&lang;ArduinoJson::JsonObject&rang;::printTo(char*, unsigned) const
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::EnableIf&lang;(!ArduinoJson::Internals::IsArray&lang;T1&rang;::value), ArduinoJson::Internals::JsonObjectSubscript&lang;const char*&rang;&&rang;::type ArduinoJson::Internals::JsonObjectSubscript&lang;const char*&rang;::operator =&lang;int&rang;(const T1&)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::StaticJsonBuffer&lang;(unsigned)200&rang;::StaticJsonBuffer()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::JsonBuffer::createObject()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f4]"></a>SetPTPCommonParams(tagPTPCommonParams*, bool, unsigned long long*)</STRONG> (Thumb, 60 bytes, Stack size 184 bytes, command.o(i._Z18SetPTPCommonParamsP18tagPTPCommonParamsbPy))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SetPTPCommonParams(tagPTPCommonParams*, bool, unsigned long long*) &rArr; MessageWrite &rArr; RingBufferEnqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageWrite
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dobot_init()
</UL>

<P><STRONG><a name="[105]"></a>SystemClock_Config()</STRONG> (Thumb, 114 bytes, Stack size 240 bytes, main.o(i._Z18SystemClock_Configv))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = SystemClock_Config() &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[107]"></a>CtrEndEffectorGripper(bool, bool, bool, unsigned long long*)</STRONG> (Thumb, 62 bytes, Stack size 192 bytes, command.o(i._Z21CtrEndEffectorGripperbbbPy))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = CtrEndEffectorGripper(bool, bool, bool, unsigned long long*) &rArr; MessageWrite &rArr; RingBufferEnqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageWrite
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grip_RS(int)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grip_GS(int)
</UL>

<P><STRONG><a name="[f3]"></a>SetPTPCoordinateParams(tagPTPCoordinateParams*, bool, unsigned long long*)</STRONG> (Thumb, 60 bytes, Stack size 184 bytes, command.o(i._Z22SetPTPCoordinateParamsP22tagPTPCoordinateParamsbPy))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SetPTPCoordinateParams(tagPTPCoordinateParams*, bool, unsigned long long*) &rArr; MessageWrite &rArr; RingBufferEnqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageWrite
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dobot_init()
</UL>

<P><STRONG><a name="[108]"></a>grip_GS(int)</STRONG> (Thumb, 370 bytes, Stack size 192 bytes, dobot.o(i._Z7grip_GSi))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = grip_GS(int) &rArr; ProtocolProcess &rArr; MessageProcess &rArr; PacketProcess(tagProtocolHandler*) &rArr; PacketReadProcess(tagProtocolHandler*) &rArr; RingBufferEnqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPTPCmd(tagPTPCmd*, bool, unsigned long long*)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrEndEffectorGripper(bool, bool, bool, unsigned long long*)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolProcess
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10a]"></a>grip_RS(int)</STRONG> (Thumb, 398 bytes, Stack size 184 bytes, dobot.o(i._Z7grip_RSi))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = grip_RS(int) &rArr; ProtocolProcess &rArr; MessageProcess &rArr; PacketProcess(tagProtocolHandler*) &rArr; PacketReadProcess(tagProtocolHandler*) &rArr; RingBufferEnqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPTPCmd(tagPTPCmd*, bool, unsigned long long*)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrEndEffectorGripper(bool, bool, bool, unsigned long long*)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolProcess
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10b]"></a>initial()</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, main.o(i._Z7initialv))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = initial() &rArr; Ali_connect &rArr; get_mqtt_password &rArr; Mbedtls_SHA1_HMAC_Compute &rArr; mbedtls_md_hmac_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emw3080_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dobot_init()
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ali_connect
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[109]"></a>SetPTPCmd(tagPTPCmd*, bool, unsigned long long*)</STRONG> (Thumb, 60 bytes, Stack size 184 bytes, command.o(i._Z9SetPTPCmdP9tagPTPCmdbPy))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SetPTPCmd(tagPTPCmd*, bool, unsigned long long*) &rArr; MessageWrite &rArr; RingBufferEnqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageWrite
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grip_RS(int)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grip_GS(int)
</UL>

<P><STRONG><a name="[f7]"></a>ArduinoJson::JsonBuffer::createObject()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(i._ZN11ArduinoJson10JsonBuffer12createObjectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ArduinoJson::JsonBuffer::createObject() &rArr; ArduinoJson::JsonObject::invalid()
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonBufferAllocated::operator new(unsigned, ArduinoJson::JsonBuffer*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::JsonObject::invalid()
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::parseObject()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::JsonObject& ArduinoJson::JsonObject::createNestedObject_impl&lang;const char*&rang;(T1)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_request(int)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_status(int, int, int, int, int, int, int, int)
</UL>

<P><STRONG><a name="[10f]"></a>ArduinoJson::JsonObject::invalid()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(i._ZN11ArduinoJson10JsonObject7invalidEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ArduinoJson::JsonObject::invalid()
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::EnableIf&lang;ArduinoJson::Internals::StringTraits&lang;const T1*, void&rang;::has_equals, ArduinoJson::Internals::JsonObjectSubscript&lang;const T1*&rang;&rang;::type ArduinoJson::Internals::JsonVariantSubscripts&lang;ArduinoJson::Internals::JsonObjectSubscript&lang;const char*&rang;&rang;::operator []&lang;char&rang;(const T1*)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::parseObject()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::JsonObject& ArduinoJson::JsonObject::createNestedObject_impl&lang;const char*&rang;(T1)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::JsonBuffer::createObject()
</UL>

<P><STRONG><a name="[128]"></a>ArduinoJson::JsonVariant::JsonVariant(const ArduinoJson::JsonObject&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i._ZN11ArduinoJson11JsonVariantC1ERKNS_10JsonObjectE))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::parseAnythingTo(ArduinoJson::JsonVariant*)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::JsonObject& ArduinoJson::JsonObject::createNestedObject_impl&lang;const char*&rang;(T1)
</UL>

<P><STRONG><a name="[14b]"></a>ArduinoJson::JsonVariant::JsonVariant__sub_object(const ArduinoJson::JsonObject&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, main.o(i._ZN11ArduinoJson11JsonVariantC1ERKNS_10JsonObjectE), UNUSED)

<P><STRONG><a name="[10e]"></a>ArduinoJson::Internals::JsonBufferAllocated::operator new(unsigned, ArduinoJson::JsonBuffer*)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i._ZN11ArduinoJson9Internals19JsonBufferAllocatednwEjPNS_10JsonBufferE))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::List&lang;ArduinoJson::JsonPair&rang;::add()
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::parseArray()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::JsonBuffer::createObject()
</UL>

<P><STRONG><a name="[74]"></a>ArduinoJson::Internals::StaticJsonBufferBase::alloc(unsigned)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, main.o(i._ZN11ArduinoJson9Internals20StaticJsonBufferBase5allocEj))
<BR>[Address Reference Count : 3]<UL><LI> main.o(.constdata__ZTVN11ArduinoJson9Internals20StaticJsonBufferBaseE)
<LI> main.o(.constdata__ZTVN11ArduinoJson16StaticJsonBufferILj200EEE)
<LI> main.o(.constdata__ZTVN11ArduinoJson16StaticJsonBufferILj400EEE)
</UL>
<P><STRONG><a name="[f6]"></a>ArduinoJson::Internals::StaticJsonBufferBase::StaticJsonBufferBase(char*, unsigned)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i._ZN11ArduinoJson9Internals20StaticJsonBufferBaseC1EPcj))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::StaticJsonBuffer&lang;(unsigned)200&rang;::StaticJsonBuffer()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_status(int, int, int, int, int, int, int, int)
</UL>

<P><STRONG><a name="[14c]"></a>ArduinoJson::Internals::StaticJsonBufferBase::StaticJsonBufferBase__sub_object(char*, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, main.o(i._ZN11ArduinoJson9Internals20StaticJsonBufferBaseC1EPcj), UNUSED)

<P><STRONG><a name="[132]"></a>ArduinoJson::Internals::Encoding::escapeTable(bool)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i._ZN11ArduinoJson9Internals8Encoding11escapeTableEb))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;::writeString(const char*)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::parseString()
</UL>

<P><STRONG><a name="[111]"></a>ArduinoJson::JsonArray::invalid()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(i._ZN11ArduinoJson9JsonArray7invalidEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ArduinoJson::JsonArray::invalid()
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::parseArray()
</UL>

<P><STRONG><a name="[b7]"></a>std::strstr(char*, const char*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i._ZSt6strstrPcPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = std::strstr(char*, const char*) &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_reply()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[113]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[14d]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[81]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emw3080_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grip_RS(int)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grip_GS(int)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ali_connect
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial()
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_reply()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[115]"></a>__0snprintf$8</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[14e]"></a>__1snprintf$8</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8), UNUSED)

<P><STRONG><a name="[80]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_pub_set
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_pub_set
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pub_data
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emw3080_init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ali_connect
</UL>

<P><STRONG><a name="[116]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[14f]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[119]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mqtt_password
</UL>

<P><STRONG><a name="[110]"></a>__cxa_guard_acquire</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::JsonArray::invalid()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::JsonObject::invalid()
</UL>

<P><STRONG><a name="[150]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[151]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[152]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[83]"></a>check_send_command</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, usart.o(i.check_send_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = check_send_command &rArr; HAL_UART_TxCpltCallback &rArr; RingBufferDequeue
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_pub_set
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_pub_set
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pub_data
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emw3080_init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ali_connect
</UL>

<P><STRONG><a name="[10d]"></a>emw3080_init</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, emw3080.o(i.emw3080_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = emw3080_init &rArr; check_send_command &rArr; HAL_UART_TxCpltCallback &rArr; RingBufferDequeue
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_send_command
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial()
</UL>

<P><STRONG><a name="[69]"></a>fputc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[11c]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_ctx_free
</UL>

<P><STRONG><a name="[82]"></a>get_mqtt_password</STRONG> (Thumb, 102 bytes, Stack size 104 bytes, hmac_sha1.o(i.get_mqtt_password))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = get_mqtt_password &rArr; Mbedtls_SHA1_HMAC_Compute &rArr; mbedtls_md_hmac_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mbedtls_SHA1_HMAC_Compute
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ali_connect
</UL>

<P><STRONG><a name="[61]"></a>main</STRONG> (Thumb, 718 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = main &rArr; service_reply() &rArr; ArduinoJson::Internals::JsonPrintable&lang;ArduinoJson::JsonObject&rang;::printTo(char*, unsigned) const &rArr; ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonObject&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&) &rArr; ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonVariant&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&) &rArr;  ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonVariant&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_pub_set
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pub_data
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grip_RS(int)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grip_GS(int)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial()
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_request(int)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_reply()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_status(int, int, int, int, int, int, int, int)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[7d]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[120]"></a>mbedtls_internal_sha1_process</STRONG> (Thumb, 4672 bytes, Stack size 144 bytes, sha1.o(i.mbedtls_internal_sha1_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mbedtls_internal_sha1_process
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update_ret
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish_ret
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_process_wrap
</UL>

<P><STRONG><a name="[e5]"></a>mbedtls_md_free</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, md.o(i.mbedtls_md_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbedtls_md_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mbedtls_SHA1_HMAC_Compute
</UL>

<P><STRONG><a name="[e4]"></a>mbedtls_md_hmac_finish</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, md.o(i.mbedtls_md_hmac_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_md_hmac_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mbedtls_SHA1_HMAC_Compute
</UL>

<P><STRONG><a name="[e2]"></a>mbedtls_md_hmac_starts</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, md.o(i.mbedtls_md_hmac_starts))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbedtls_md_hmac_starts
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mbedtls_SHA1_HMAC_Compute
</UL>

<P><STRONG><a name="[e3]"></a>mbedtls_md_hmac_update</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, md.o(i.mbedtls_md_hmac_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_md_hmac_update
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mbedtls_SHA1_HMAC_Compute
</UL>

<P><STRONG><a name="[e0]"></a>mbedtls_md_info_from_type</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, md.o(i.mbedtls_md_info_from_type))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mbedtls_SHA1_HMAC_Compute
</UL>

<P><STRONG><a name="[df]"></a>mbedtls_md_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, md.o(i.mbedtls_md_init))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mbedtls_SHA1_HMAC_Compute
</UL>

<P><STRONG><a name="[e1]"></a>mbedtls_md_setup</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, md.o(i.mbedtls_md_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbedtls_md_setup &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mbedtls_SHA1_HMAC_Compute
</UL>

<P><STRONG><a name="[11b]"></a>mbedtls_platform_zeroize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, platform_util.o(i.mbedtls_platform_zeroize))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_hmac_starts
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_md_free
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
</UL>

<P><STRONG><a name="[11d]"></a>mbedtls_sha1_clone</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha1.o(i.mbedtls_sha1_clone))
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_clone_wrap
</UL>

<P><STRONG><a name="[11f]"></a>mbedtls_sha1_finish_ret</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, sha1.o(i.mbedtls_sha1_finish_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mbedtls_sha1_finish_ret &rArr; mbedtls_internal_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha1_process
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_ret
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_finish_wrap
</UL>

<P><STRONG><a name="[121]"></a>mbedtls_sha1_free</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sha1.o(i.mbedtls_sha1_free))
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_platform_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_ret
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_ctx_free
</UL>

<P><STRONG><a name="[122]"></a>mbedtls_sha1_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sha1.o(i.mbedtls_sha1_init))
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_ret
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_ctx_alloc
</UL>

<P><STRONG><a name="[6f]"></a>mbedtls_sha1_ret</STRONG> (Thumb, 62 bytes, Stack size 112 bytes, sha1.o(i.mbedtls_sha1_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = mbedtls_sha1_ret &rArr; mbedtls_sha1_update_ret &rArr; mbedtls_internal_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update_ret
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts_ret
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[123]"></a>mbedtls_sha1_starts_ret</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, sha1.o(i.mbedtls_sha1_starts_ret))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_ret
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_starts_wrap
</UL>

<P><STRONG><a name="[124]"></a>mbedtls_sha1_update_ret</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, sha1.o(i.mbedtls_sha1_update_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mbedtls_sha1_update_ret &rArr; mbedtls_internal_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha1_process
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_ret
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_update_wrap
</UL>

<P><STRONG><a name="[102]"></a>pub_data</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, emw3080.o(i.pub_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pub_data &rArr; check_send_command &rArr; HAL_UART_TxCpltCallback &rArr; RingBufferDequeue
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_send_command
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_reply()
</UL>

<P><STRONG><a name="[100]"></a>service_pub_set</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, emw3080.o(i.service_pub_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = service_pub_set &rArr; check_send_command &rArr; HAL_UART_TxCpltCallback &rArr; RingBufferDequeue
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_send_command
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_reply()
</UL>

<P><STRONG><a name="[11a]"></a>status_pub_set</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, emw3080.o(i.status_pub_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = status_pub_set &rArr; check_send_command &rArr; HAL_UART_TxCpltCallback &rArr; RingBufferDequeue
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_send_command
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f9]"></a>ArduinoJson::JsonObject& ArduinoJson::JsonObject::createNestedObject_impl&lang;const char*&rang;(T1)</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, main.o(t._ZN11ArduinoJson10JsonObject23createNestedObject_implIPKcEERS0_T_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ArduinoJson::JsonObject& ArduinoJson::JsonObject::createNestedObject_impl&lang;const char*&rang;(T1) &rArr; ArduinoJson::Internals::ListIterator&lang;ArduinoJson::JsonPair&rang; ArduinoJson::JsonObject::findKey&lang;const char*&rang;(T1) &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::ListIterator&lang;ArduinoJson::JsonPair&rang;::operator ==(const ArduinoJson::Internals::ListIterator&lang;ArduinoJson::JsonPair&rang;&) const
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::List&lang;ArduinoJson::JsonPair&rang;::add()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::ListIterator&lang;ArduinoJson::JsonPair&rang; ArduinoJson::JsonObject::findKey&lang;const char*&rang;(T1)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::JsonVariant::JsonVariant(const ArduinoJson::JsonObject&)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::JsonObject::invalid()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::JsonBuffer::createObject()
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_reply()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_status(int, int, int, int, int, int, int, int)
</UL>

<P><STRONG><a name="[101]"></a>void ArduinoJson::JsonObject::remove&lang;const char&rang;(T1*)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main.o(t._ZN11ArduinoJson10JsonObject6removeIKcEEvPT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = void ArduinoJson::JsonObject::remove&lang;const char&rang;(T1*) &rArr; ArduinoJson::Internals::ListIterator&lang;ArduinoJson::JsonPair&rang; ArduinoJson::JsonObject::findKey&lang;const char*&rang;(T1) &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::ListIterator&lang;ArduinoJson::JsonPair&rang; ArduinoJson::JsonObject::findKey&lang;const char*&rang;(T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_reply()
</UL>

<P><STRONG><a name="[125]"></a>ArduinoJson::Internals::ListIterator&lang;ArduinoJson::JsonPair&rang; ArduinoJson::JsonObject::findKey&lang;const char*&rang;(T1)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, main.o(t._ZN11ArduinoJson10JsonObject7findKeyIPKcEENS_9Internals12ListIteratorINS_8JsonPairEEET_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ArduinoJson::Internals::ListIterator&lang;ArduinoJson::JsonPair&rang; ArduinoJson::JsonObject::findKey&lang;const char*&rang;(T1) &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::ListConstIterator&lang;ArduinoJson::JsonPair&rang; ArduinoJson::JsonObject::findKey&lang;const char*&rang;(T1) const
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonObjectSubscript&lang;const char*&rang;& ArduinoJson::Internals::JsonObjectSubscript&lang;const char*&rang;::operator =&lang;const char&rang;(T1*)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::parseObject()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson::JsonObject::set_impl&lang;const char*, const int&&rang;(T1, T2)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ArduinoJson::JsonObject::remove&lang;const char&rang;(T1*)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::JsonObject& ArduinoJson::JsonObject::createNestedObject_impl&lang;const char*&rang;(T1)
</UL>

<P><STRONG><a name="[129]"></a>bool ArduinoJson::JsonObject::set_impl&lang;const char*, const int&&rang;(T1, T2)</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, main.o(t._ZN11ArduinoJson10JsonObject8set_implIPKcRKiEEbT_T0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bool ArduinoJson::JsonObject::set_impl&lang;const char*, const int&&rang;(T1, T2) &rArr; ArduinoJson::Internals::ListIterator&lang;ArduinoJson::JsonPair&rang; ArduinoJson::JsonObject::findKey&lang;const char*&rang;(T1) &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::ListIterator&lang;ArduinoJson::JsonPair&rang;::operator ==(const ArduinoJson::Internals::ListIterator&lang;ArduinoJson::JsonPair&rang;&) const
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::List&lang;ArduinoJson::JsonPair&rang;::add()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::ListIterator&lang;ArduinoJson::JsonPair&rang; ArduinoJson::JsonObject::findKey&lang;const char*&rang;(T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::EnableIf&lang;(!ArduinoJson::Internals::IsArray&lang;T1&rang;::value), ArduinoJson::Internals::JsonObjectSubscript&lang;const char*&rang;&&rang;::type ArduinoJson::Internals::JsonObjectSubscript&lang;const char*&rang;::operator =&lang;int&rang;(const T1&)
</UL>

<P><STRONG><a name="[b8]"></a>ArduinoJson::StaticJsonBuffer&lang;(unsigned)200&rang;::StaticJsonBuffer()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(t._ZN11ArduinoJson16StaticJsonBufferILj200EEC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ArduinoJson::StaticJsonBuffer&lang;(unsigned)200&rang;::StaticJsonBuffer()
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::StaticJsonBufferBase::StaticJsonBufferBase(char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_request(int)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_reply()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[153]"></a>ArduinoJson::StaticJsonBuffer&lang;(unsigned)200&rang;::StaticJsonBuffer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, main.o(t._ZN11ArduinoJson16StaticJsonBufferILj200EEC1Ev), UNUSED)

<P><STRONG><a name="[12b]"></a>ArduinoJson::Internals::FloatParts&lang;float&rang;::normalize(float&)</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, main.o(t._ZN11ArduinoJson9Internals10FloatPartsIfE9normalizeERf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ArduinoJson::Internals::FloatParts&lang;float&rang;::normalize(float&)
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::FloatParts&lang;float&rang;::FloatParts(float)
</UL>

<P><STRONG><a name="[12a]"></a>ArduinoJson::Internals::FloatParts&lang;float&rang;::FloatParts(float)</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, main.o(t._ZN11ArduinoJson9Internals10FloatPartsIfEC1Ef))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ArduinoJson::Internals::FloatParts&lang;float&rang;::FloatParts(float) &rArr; ArduinoJson::Internals::FloatParts&lang;float&rang;::normalize(float&)
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::FloatParts&lang;float&rang;::normalize(float&)
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;::writeFloat&lang;float&rang;(T1)
</UL>

<P><STRONG><a name="[154]"></a>ArduinoJson::Internals::FloatParts&lang;float&rang;::FloatParts__sub_object(float)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, main.o(t._ZN11ArduinoJson9Internals10FloatPartsIfEC1Ef), UNUSED)

<P><STRONG><a name="[12c]"></a>ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::parseArray()</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, main.o(t._ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE10parseArrayEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::parseArray() &rArr;  ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::parseAnythingTo(ArduinoJson::JsonVariant*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::eat(char)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::parseAnythingTo(ArduinoJson::JsonVariant*)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::JsonArray::invalid()
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonBufferAllocated::operator new(unsigned, ArduinoJson::JsonBuffer*)
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::parseAnythingTo(ArduinoJson::JsonVariant*)
</UL>

<P><STRONG><a name="[12f]"></a>ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::parseObject()</STRONG> (Thumb, 188 bytes, Stack size 56 bytes, main.o(t._ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE11parseObjectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::parseObject() &rArr; ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::parseAnythingTo(ArduinoJson::JsonVariant*) &rArr;  ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::parseObject() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::ListIterator&lang;ArduinoJson::JsonPair&rang;::operator ==(const ArduinoJson::Internals::ListIterator&lang;ArduinoJson::JsonPair&rang;&) const
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::List&lang;ArduinoJson::JsonPair&rang;::add()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::eat(char)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::parseAnythingTo(ArduinoJson::JsonVariant*)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::parseString()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::ListIterator&lang;ArduinoJson::JsonPair&rang; ArduinoJson::JsonObject::findKey&lang;const char*&rang;(T1)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::JsonObject::invalid()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::JsonBuffer::createObject()
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::JsonObject& ArduinoJson::Internals::JsonBufferBase&lang;ArduinoJson::Internals::StaticJsonBufferBase&rang;::parseObject&lang;char&rang;(T1*, unsigned char)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::parseAnythingTo(ArduinoJson::JsonVariant*)
</UL>

<P><STRONG><a name="[130]"></a>ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::parseString()</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, main.o(t._ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE11parseStringEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::parseString()
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ArduinoJson::Internals::skipSpacesAndComments&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader&rang;(T1&)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::StringWriter&lang;char&rang;::String::append(char)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::isBetween(char, char, char)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::Encoding::escapeTable(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::parseAnythingTo(ArduinoJson::JsonVariant*)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::parseObject()
</UL>

<P><STRONG><a name="[12e]"></a>ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::parseAnythingTo(ArduinoJson::JsonVariant*)</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, main.o(t._ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE15parseAnythingToEPNS_11JsonVariantE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + In Cycle
<LI>Call Chain = ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::parseAnythingTo(ArduinoJson::JsonVariant*) &rArr;  ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::parseObject() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ArduinoJson::Internals::skipSpacesAndComments&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader&rang;(T1&)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::parseString()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::parseObject()
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::parseArray()
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::JsonVariant::JsonVariant(const ArduinoJson::JsonObject&)
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::parseObject()
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::parseArray()
</UL>

<P><STRONG><a name="[12d]"></a>ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::eat(char)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, main.o(t._ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE3eatEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::eat(char)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ArduinoJson::Internals::skipSpacesAndComments&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader&rang;(T1&)
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::parseObject()
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::parseArray()
</UL>

<P><STRONG><a name="[134]"></a>ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::isBetween(char, char, char)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(t._ZN11ArduinoJson9Internals10JsonParserINS0_17CharPointerTraitsIcE6ReaderENS0_12StringWriterIcEEE9isBetweenEccc))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::parseString()
</UL>

<P><STRONG><a name="[135]"></a>void ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;::writeFloat&lang;float&rang;(T1)</STRONG> (Thumb, 320 bytes, Stack size 64 bytes, main.o(t._ZN11ArduinoJson9Internals10JsonWriterINS0_19StaticStringBuilderEE10writeFloatIfEEvT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = void ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;::writeFloat&lang;float&rang;(T1) &rArr; ArduinoJson::Internals::FloatParts&lang;float&rang;::FloatParts(float) &rArr; ArduinoJson::Internals::FloatParts&lang;float&rang;::normalize(float&)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;::writeRaw(char)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;::writeRaw(const char*)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::FloatParts&lang;float&rang;::FloatParts(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonVariant&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&)
</UL>

<P><STRONG><a name="[138]"></a>ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;::writeString(const char*)</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, main.o(t._ZN11ArduinoJson9Internals10JsonWriterINS0_19StaticStringBuilderEE11writeStringEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;::writeString(const char*) &rArr; ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;::writeRaw(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;::writeRaw(char)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;::writeRaw(const char*)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::Encoding::escapeTable(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonVariant&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonObject&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&)
</UL>

<P><STRONG><a name="[137]"></a>ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;::writeRaw(const char*)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, main.o(t._ZN11ArduinoJson9Internals10JsonWriterINS0_19StaticStringBuilderEE8writeRawEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;::writeRaw(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonVariant&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;::writeString(const char*)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;::writeFloat&lang;float&rang;(T1)
</UL>

<P><STRONG><a name="[136]"></a>ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;::writeRaw(char)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, main.o(t._ZN11ArduinoJson9Internals10JsonWriterINS0_19StaticStringBuilderEE8writeRawEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;::writeRaw(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonVariant&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonObject&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;::writeString(const char*)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;::writeFloat&lang;float&rang;(T1)
</UL>

<P><STRONG><a name="[133]"></a>ArduinoJson::Internals::StringWriter&lang;char&rang;::String::append(char)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(t._ZN11ArduinoJson9Internals12StringWriterIcE6String6appendEc))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::parseString()
</UL>

<P><STRONG><a name="[b9]"></a>ArduinoJson::JsonObject& ArduinoJson::Internals::JsonBufferBase&lang;ArduinoJson::Internals::StaticJsonBufferBase&rang;::parseObject&lang;char&rang;(T1*, unsigned char)</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, main.o(t._ZN11ArduinoJson9Internals14JsonBufferBaseINS0_20StaticJsonBufferBaseEE11parseObjectIcEERNS_10JsonObjectEPT_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ArduinoJson::JsonObject& ArduinoJson::Internals::JsonBufferBase&lang;ArduinoJson::Internals::StaticJsonBufferBase&rang;::parseObject&lang;char&rang;(T1*, unsigned char) &rArr; ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::parseObject() &rArr; ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::parseAnythingTo(ArduinoJson::JsonVariant*) &rArr;  ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::parseObject() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::parseObject()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_reply()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[139]"></a>ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonObject&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&)</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, main.o(t._ZN11ArduinoJson9Internals14JsonSerializerINS0_10JsonWriterINS0_19StaticStringBuilderEEEE9serializeERKNS_10JsonObjectERS4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonObject&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&) &rArr; ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonVariant&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&) &rArr;  ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonVariant&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::ListConstIterator&lang;ArduinoJson::JsonPair&rang;::operator !=(const ArduinoJson::Internals::ListConstIterator&lang;ArduinoJson::JsonPair&rang;&) const
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonVariant&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;::writeRaw(char)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;::writeString(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonPrintable&lang;ArduinoJson::JsonObject&rang;::printTo(char*, unsigned) const
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonVariant&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&)
</UL>

<P><STRONG><a name="[13a]"></a>ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonVariant&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&)</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, main.o(t._ZN11ArduinoJson9Internals14JsonSerializerINS0_10JsonWriterINS0_19StaticStringBuilderEEEE9serializeERKNS_11JsonVariantERS4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + In Cycle
<LI>Call Chain = ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonVariant&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&) &rArr;  ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonVariant&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonVariant&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonObject&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;::writeRaw(char)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;::writeRaw(const char*)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;::writeString(const char*)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;::writeFloat&lang;float&rang;(T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonVariant&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonObject&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&)
</UL>

<P><STRONG><a name="[f8]"></a>ArduinoJson::Internals::JsonObjectSubscript&lang;const char*&rang;& ArduinoJson::Internals::JsonObjectSubscript&lang;const char*&rang;::operator =&lang;const char&rang;(T1*)</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, main.o(t._ZN11ArduinoJson9Internals19JsonObjectSubscriptIPKcEaSIS2_EERS4_PT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ArduinoJson::Internals::JsonObjectSubscript&lang;const char*&rang;& ArduinoJson::Internals::JsonObjectSubscript&lang;const char*&rang;::operator =&lang;const char&rang;(T1*) &rArr; ArduinoJson::Internals::ListIterator&lang;ArduinoJson::JsonPair&rang; ArduinoJson::JsonObject::findKey&lang;const char*&rang;(T1) &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::ListIterator&lang;ArduinoJson::JsonPair&rang;::operator ==(const ArduinoJson::Internals::ListIterator&lang;ArduinoJson::JsonPair&rang;&) const
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::List&lang;ArduinoJson::JsonPair&rang;::add()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::ListIterator&lang;ArduinoJson::JsonPair&rang; ArduinoJson::JsonObject::findKey&lang;const char*&rang;(T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_status(int, int, int, int, int, int, int, int)
</UL>

<P><STRONG><a name="[bd]"></a>ArduinoJson::Internals::EnableIf&lang;(!ArduinoJson::Internals::IsArray&lang;T1&rang;::value), ArduinoJson::Internals::JsonObjectSubscript&lang;const char*&rang;&&rang;::type ArduinoJson::Internals::JsonObjectSubscript&lang;const char*&rang;::operator =&lang;int&rang;(const T1&)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(t._ZN11ArduinoJson9Internals19JsonObjectSubscriptIPKcEaSIiEENS0_8EnableIfIXntsr11ArduinoJson9Internals7IsArrayIT_EE5valueERS4_E4typeERKS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ArduinoJson::Internals::EnableIf&lang;(!ArduinoJson::Internals::IsArray&lang;T1&rang;::value), ArduinoJson::Internals::JsonObjectSubscript&lang;const char*&rang;&&rang;::type ArduinoJson::Internals::JsonObjectSubscript&lang;const char*&rang;::operator =&lang;int&rang;(const T1&) &rArr; bool ArduinoJson::JsonObject::set_impl&lang;const char*, const int&&rang;(T1, T2) &rArr; ArduinoJson::Internals::ListIterator&lang;ArduinoJson::JsonPair&rang; ArduinoJson::JsonObject::findKey&lang;const char*&rang;(T1) &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson::JsonObject::set_impl&lang;const char*, const int&&rang;(T1, T2)
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_request(int)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_reply()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_status(int, int, int, int, int, int, int, int)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[fa]"></a>ArduinoJson::Internals::EnableIf&lang;ArduinoJson::Internals::StringTraits&lang;const T1*, void&rang;::has_equals, ArduinoJson::Internals::JsonObjectSubscript&lang;const T1*&rang;&rang;::type ArduinoJson::Internals::JsonVariantSubscripts&lang;ArduinoJson::Internals::JsonObjectSubscript&lang;const char*&rang;&rang;::operator []&lang;char&rang;(const T1*)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, main.o(t._ZN11ArduinoJson9Internals21JsonVariantSubscriptsINS0_19JsonObjectSubscriptIPKcEEEixIcEENS0_8EnableIfIXsr11ArduinoJson9Internals12StringTraitsIPKT_vEE10has_equalsENS2_ISB_EEE4typeESB_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ArduinoJson::Internals::EnableIf&lang;ArduinoJson::Internals::StringTraits&lang;const T1*, void&rang;::has_equals, ArduinoJson::Internals::JsonObjectSubscript&lang;const T1*&rang;&rang;::type ArduinoJson::Internals::JsonVariantSubscripts&lang;ArduinoJson::Internals::JsonObjectSubscript&lang;const char*&rang;&rang;::operator []&lang;char&rang;(const T1*) &rArr; ArduinoJson::Internals::ListConstIterator&lang;ArduinoJson::JsonPair&rang; ArduinoJson::JsonObject::findKey&lang;const char*&rang;(T1) const &rArr; ArduinoJson::Internals::ListIterator&lang;ArduinoJson::JsonPair&rang; ArduinoJson::JsonObject::findKey&lang;const char*&rang;(T1) &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::ListConstIterator&lang;ArduinoJson::JsonPair&rang;::operator !=(const ArduinoJson::Internals::ListConstIterator&lang;ArduinoJson::JsonPair&rang;&) const
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::ListConstIterator&lang;ArduinoJson::JsonPair&rang; ArduinoJson::JsonObject::findKey&lang;const char*&rang;(T1) const
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::JsonObject::invalid()
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_status(int, int, int, int, int, int, int, int)
</UL>

<P><STRONG><a name="[131]"></a>void ArduinoJson::Internals::skipSpacesAndComments&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader&rang;(T1&)</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, main.o(t._ZN11ArduinoJson9Internals21skipSpacesAndCommentsINS0_17CharPointerTraitsIcE6ReaderEEEvRT_))
<BR><BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ArduinoJson::Internals::skipSpacesAndComments&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader&rang;(T1&)
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ArduinoJson::Internals::skipSpacesAndComments&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader&rang;(T1&)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::eat(char)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::parseAnythingTo(ArduinoJson::JsonVariant*)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::parseString()
</UL>

<P><STRONG><a name="[127]"></a>ArduinoJson::Internals::List&lang;ArduinoJson::JsonPair&rang;::add()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main.o(t._ZN11ArduinoJson9Internals4ListINS_8JsonPairEE3addEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ArduinoJson::Internals::List&lang;ArduinoJson::JsonPair&rang;::add()
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonBufferAllocated::operator new(unsigned, ArduinoJson::JsonBuffer*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonObjectSubscript&lang;const char*&rang;& ArduinoJson::Internals::JsonObjectSubscript&lang;const char*&rang;::operator =&lang;const char&rang;(T1*)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::parseObject()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson::JsonObject::set_impl&lang;const char*, const int&&rang;(T1, T2)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::JsonObject& ArduinoJson::JsonObject::createNestedObject_impl&lang;const char*&rang;(T1)
</UL>

<P><STRONG><a name="[bc]"></a>bool ArduinoJson::Internals::operator ==&lang;int&rang;(const ArduinoJson::Internals::JsonVariantComparisons&lang;ArduinoJson::Internals::JsonObjectSubscript&lang;const char*&rang;&rang;&, T1)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(t._ZN11ArduinoJson9InternalseqIiEEbRKNS0_22JsonVariantComparisonsINS0_19JsonObjectSubscriptIPKcEEEET_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bool ArduinoJson::Internals::operator ==&lang;int&rang;(const ArduinoJson::Internals::JsonVariantComparisons&lang;ArduinoJson::Internals::JsonObjectSubscript&lang;const char*&rang;&rang;&, T1) &rArr; ArduinoJson::Internals::JsonVariantAs&lang;T1&rang;::type ArduinoJson::Internals::JsonObjectSubscript&lang;const char*&rang;::as&lang;int&rang;() const &rArr; ArduinoJson::Internals::ListConstIterator&lang;ArduinoJson::JsonPair&rang; ArduinoJson::JsonObject::findKey&lang;const char*&rang;(T1) const &rArr; ArduinoJson::Internals::ListIterator&lang;ArduinoJson::JsonPair&rang; ArduinoJson::JsonObject::findKey&lang;const char*&rang;(T1) &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonVariantAs&lang;T1&rang;::type ArduinoJson::Internals::JsonObjectSubscript&lang;const char*&rang;::as&lang;int&rang;() const
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[ba]"></a>ArduinoJson::Internals::ListConstIterator&lang;ArduinoJson::JsonPair&rang; ArduinoJson::JsonObject::findKey&lang;const char*&rang;(T1) const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(t._ZNK11ArduinoJson10JsonObject7findKeyIPKcEENS_9Internals17ListConstIteratorINS_8JsonPairEEET_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ArduinoJson::Internals::ListConstIterator&lang;ArduinoJson::JsonPair&rang; ArduinoJson::JsonObject::findKey&lang;const char*&rang;(T1) const &rArr; ArduinoJson::Internals::ListIterator&lang;ArduinoJson::JsonPair&rang; ArduinoJson::JsonObject::findKey&lang;const char*&rang;(T1) &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::ListIterator&lang;ArduinoJson::JsonPair&rang; ArduinoJson::JsonObject::findKey&lang;const char*&rang;(T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonVariantAs&lang;T1&rang;::type ArduinoJson::Internals::JsonObjectSubscript&lang;const char*&rang;::as&lang;int&rang;() const
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::EnableIf&lang;ArduinoJson::Internals::StringTraits&lang;const T1*, void&rang;::has_equals, ArduinoJson::Internals::JsonObjectSubscript&lang;const T1*&rang;&rang;::type ArduinoJson::Internals::JsonVariantSubscripts&lang;ArduinoJson::Internals::JsonObjectSubscript&lang;const char*&rang;&rang;::operator []&lang;char&rang;(const T1*)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_reply()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[13b]"></a>T1 ArduinoJson::JsonVariant::variantAsInteger&lang;int&rang;() const</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, main.o(t._ZNK11ArduinoJson11JsonVariant16variantAsIntegerIiEET_v))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = T1 ArduinoJson::JsonVariant::variantAsInteger&lang;int&rang;() const
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonVariantAs&lang;T1&rang;::type ArduinoJson::Internals::JsonObjectSubscript&lang;const char*&rang;::as&lang;int&rang;() const
</UL>

<P><STRONG><a name="[126]"></a>ArduinoJson::Internals::ListIterator&lang;ArduinoJson::JsonPair&rang;::operator ==(const ArduinoJson::Internals::ListIterator&lang;ArduinoJson::JsonPair&rang;&) const</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(t._ZNK11ArduinoJson9Internals12ListIteratorINS_8JsonPairEEeqERKS3_))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonObjectSubscript&lang;const char*&rang;& ArduinoJson::Internals::JsonObjectSubscript&lang;const char*&rang;::operator =&lang;const char&rang;(T1*)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonParser&lang;ArduinoJson::Internals::CharPointerTraits&lang;char&rang;::Reader, ArduinoJson::Internals::StringWriter&lang;char&rang;&rang;::parseObject()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson::JsonObject::set_impl&lang;const char*, const int&&rang;(T1, T2)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::JsonObject& ArduinoJson::JsonObject::createNestedObject_impl&lang;const char*&rang;(T1)
</UL>

<P><STRONG><a name="[be]"></a>ArduinoJson::Internals::JsonPrintable&lang;ArduinoJson::JsonObject&rang;::printTo(char*, unsigned) const</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, main.o(t._ZNK11ArduinoJson9Internals13JsonPrintableINS_10JsonObjectEE7printToEPcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ArduinoJson::Internals::JsonPrintable&lang;ArduinoJson::JsonObject&rang;::printTo(char*, unsigned) const &rArr; ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonObject&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&) &rArr; ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonVariant&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&) &rArr;  ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonVariant&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonObject&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_request(int)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_reply()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_status(int, int, int, int, int, int, int, int)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[bb]"></a>ArduinoJson::Internals::ListConstIterator&lang;ArduinoJson::JsonPair&rang;::operator !=(const ArduinoJson::Internals::ListConstIterator&lang;ArduinoJson::JsonPair&rang;&) const</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(t._ZNK11ArduinoJson9Internals17ListConstIteratorINS_8JsonPairEEneERKS3_))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonVariantAs&lang;T1&rang;::type ArduinoJson::Internals::JsonObjectSubscript&lang;const char*&rang;::as&lang;int&rang;() const
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::EnableIf&lang;ArduinoJson::Internals::StringTraits&lang;const T1*, void&rang;::has_equals, ArduinoJson::Internals::JsonObjectSubscript&lang;const T1*&rang;&rang;::type ArduinoJson::Internals::JsonVariantSubscripts&lang;ArduinoJson::Internals::JsonObjectSubscript&lang;const char*&rang;&rang;::operator []&lang;char&rang;(const T1*)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::JsonSerializer&lang;ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&rang;::serialize(const ArduinoJson::JsonObject&, ArduinoJson::Internals::JsonWriter&lang;ArduinoJson::Internals::StaticStringBuilder&rang;&)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_reply()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[c1]"></a>ArduinoJson::Internals::JsonVariantAs&lang;T1&rang;::type ArduinoJson::Internals::JsonObjectSubscript&lang;const char*&rang;::as&lang;int&rang;() const</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, main.o(t._ZNK11ArduinoJson9Internals19JsonObjectSubscriptIPKcE2asIiEENS0_13JsonVariantAsIT_E4typeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ArduinoJson::Internals::JsonVariantAs&lang;T1&rang;::type ArduinoJson::Internals::JsonObjectSubscript&lang;const char*&rang;::as&lang;int&rang;() const &rArr; ArduinoJson::Internals::ListConstIterator&lang;ArduinoJson::JsonPair&rang; ArduinoJson::JsonObject::findKey&lang;const char*&rang;(T1) const &rArr; ArduinoJson::Internals::ListIterator&lang;ArduinoJson::JsonPair&rang; ArduinoJson::JsonObject::findKey&lang;const char*&rang;(T1) &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::ListConstIterator&lang;ArduinoJson::JsonPair&rang;::operator !=(const ArduinoJson::Internals::ListConstIterator&lang;ArduinoJson::JsonPair&rang;&) const
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 ArduinoJson::JsonVariant::variantAsInteger&lang;int&rang;() const
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson::Internals::ListConstIterator&lang;ArduinoJson::JsonPair&rang; ArduinoJson::JsonObject::findKey&lang;const char*&rang;(T1) const
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson::Internals::operator ==&lang;int&rang;(const ArduinoJson::Internals::JsonVariantComparisons&lang;ArduinoJson::Internals::JsonObjectSubscript&lang;const char*&rang;&rang;&, T1)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[9e]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[ac]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 132 bytes, Stack size 28 bytes, stm32l4xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[ae]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, stm32l4xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[af]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, stm32l4xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[b0]"></a>TIM_OC5_SetConfig</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, stm32l4xx_hal_tim.o(i.TIM_OC5_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC5_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[b1]"></a>TIM_OC6_SetConfig</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, stm32l4xx_hal_tim.o(i.TIM_OC6_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC6_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[9c]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[9d]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[64]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[c5]"></a>UART_EndRxTransfer</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[66]"></a>UART_RxISR_16BIT</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.UART_RxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UART_RxISR_16BIT &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_Receive_IT)
</UL>
<P><STRONG><a name="[65]"></a>UART_RxISR_8BIT</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.UART_RxISR_8BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UART_RxISR_8BIT &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_Receive_IT)
</UL>
<P><STRONG><a name="[68]"></a>UART_TxISR_16BIT</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_TxISR_16BIT))
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_IT)
</UL>
<P><STRONG><a name="[67]"></a>UART_TxISR_8BIT</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_TxISR_8BIT))
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_IT)
</UL>
<P><STRONG><a name="[95]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc.o(i.RCC_SetFlashLatencyFromMSIRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_GetVoltageRange
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[90]"></a>RCCEx_PLLSAI1_Config</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc_ex.o(i.RCCEx_PLLSAI1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLLSAI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[91]"></a>RCCEx_PLLSAI2_Config</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc_ex.o(i.RCCEx_PLLSAI2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[8e]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[fc]"></a>PacketReadProcess(tagProtocolHandler*)</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, packet.o(i._Z17PacketReadProcessP18tagProtocolHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PacketReadProcess(tagProtocolHandler*) &rArr; RingBufferEnqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufferEnqueue
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufferDequeue
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufferDataAt
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketProcess(tagProtocolHandler*)
</UL>

<P><STRONG><a name="[fd]"></a>PacketWriteProcess(tagProtocolHandler*)</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, packet.o(i._Z18PacketWriteProcessP18tagProtocolHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PacketWriteProcess(tagProtocolHandler*) &rArr; RingBufferEnqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufferEnqueue
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufferDequeue
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufferDataAt
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketProcess(tagProtocolHandler*)
</UL>

<P><STRONG><a name="[72]"></a>sha1_clone_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha1_clone_wrap))
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_clone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>sha1_ctx_alloc</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, md_wrap.o(i.sha1_ctx_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = sha1_ctx_alloc &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>sha1_ctx_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, md_wrap.o(i.sha1_ctx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sha1_ctx_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_free
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>sha1_finish_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha1_finish_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = sha1_finish_wrap &rArr; mbedtls_sha1_finish_ret &rArr; mbedtls_internal_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_finish_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>sha1_process_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha1_process_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sha1_process_wrap &rArr; mbedtls_internal_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_internal_sha1_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>sha1_starts_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha1_starts_wrap))
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_starts_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>sha1_update_wrap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, md_wrap.o(i.sha1_update_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = sha1_update_wrap &rArr; mbedtls_sha1_update_ret &rArr; mbedtls_internal_sha1_process
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_sha1_update_ret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md_wrap.o(.constdata)
</UL>
<P><STRONG><a name="[114]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf$8
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[118]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[117]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6a]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printf8.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0snprintf$8)
</UL>
<P><STRONG><a name="[6b]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
